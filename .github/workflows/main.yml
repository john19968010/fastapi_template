name: ci

on:
  push:
    branches:
      - "main"
      - "build-sonar-step"

# allows SonarQube to decorate PRs with analysis results
permissions:
  pull-requests: read

jobs:
  # Scan-code-with-sonarqube:
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Need to add actions/checkout before running your local action.
  #     -
  #       name: Checkout
  #       uses: actions/checkout@v4
  #     -
  #       name: SonarQube Scan
  #       uses: sonarsource/sonarqube-scan-action@master
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} 
  #         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         # Additional arguments for the sonarcloud scanner
  #         args:
  #           # Unique key of your project. You can find it in SonarQube > [my project] > Project Information (top-right menu)
  #           # mandatory
  #           -Dsonar.projectKey=fastapi_template

  Send-sonar-scan-result:
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} 
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      MAIL_ACCOUNT: ${{ secrets.MAIL_ACCOUNT }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
    # needs: [Scan-code-with-sonarqube]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      # - name: Install packages
      #   run: |
      #     sudo apt-get install -y curl, jq
      - name: Get scan result and send mail
        run: |
          echo "Get scan result"
          scan_result=$(curl -u "${SONAR_TOKEN}:" --location "${SONAR_HOST_URL}/api/measures/component?component=fastapi_template&metricKeys=alert_status%2Cbugs%2Creliability_rating%2Cvulnerabilities%2Csecurity_hotspots%2Csecurity_rating%2Csqale_index%2Ccode_smells%2Csqale_rating%2Ccoverage%2Cduplicated_blocks%2Cduplicated_lines_density" \
          | jq '.component.measures')
          echo "${scan_result}"
          echo "==========================="
          echo "Send mail"
          curl --location 'http://us-central1-responsive-bird-409109.cloudfunctions.net/function-1' \
          --header 'Content-Type: application/json' \
          --data-raw '{
              "domain": "smtp.gmail.com",
              "port": "587",
              "account": "'"${MAIL_ACCOUNT}"'",
              "password": "'"${MAIL_PASSWORD}"'",
              "receiver": "'"${MAIL_ACCOUNT}"'",
              "title": "Sonar Scan result of "'"${GITHUB_ACTION_REPOSITORY}"'" in branch "'"${GITHUB_REF}"'" and commit "'"${GITHUB_SHA}"'",
              "content": "'"${scan-result}"'"
          }'    

  # Build-image-to-DockerHub:
  #   runs-on: ubuntu-latest
  #   steps:
  #     -
  #       name: Checkout
  #       uses: actions/checkout@v4
  #     -
  #       name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
  #     -
  #       name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #     -
  #       name: Build and push
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         file: ./Dockerfile
  #         push: true
  #         tags: ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-template:latest
  
  # Deploy-on-K8s-Cluster:
  #   needs: [Build-image-to-DockerHub]
  #   runs-on: ubuntu-latest
  #   env:
  #     nodePort: 30800
  #   steps:
  #     - name: Create kube config
  #       run: |
  #         mkdir -p $HOME/.kube/
  #         echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
  #         chmod 600 $HOME/.kube/config
  #     - name: Install helm
  #       run: |
  #         curl -LO https://get.helm.sh/helm-v3.8.0-linux-amd64.tar.gz
  #         tar -zxvf helm-v3.8.0-linux-amd64.tar.gz
  #         mv linux-amd64/helm /usr/local/bin/helm
  #         helm version
  #     - name: Deploy
  #       run: |
  #         helm repo add my-fastapi-template https://john19968010.github.io/my-helm-chart/helm-chart-index && \
  #         helm install my-my-fastapi-chart my-fastapi-template/my-fastapi-chart --version 0.1.0 \
  #         --set service.nodePort=$nodePort